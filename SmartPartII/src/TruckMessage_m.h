//
// Generated file, do not edit! Created by opp_msgtool 6.0 from src/TruckMessage.msg.
//

#ifndef __TRUCKMESSAGE_M_H
#define __TRUCKMESSAGE_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// opp_msgtool version check
#define MSGC_VERSION 0x0600
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgtool: 'make clean' should help.
#endif

class TruckMessage;
/**
 * Class generated from <tt>src/TruckMessage.msg:1</tt> by opp_msgtool.
 * <pre>
 * message TruckMessage
 * {
 *     int truckId;
 *     int binId;
 *     bool accepted;
 * }
 * </pre>
 */
class TruckMessage : public ::omnetpp::cMessage
{
  protected:
    int truckId = 0;
    int binId = 0;
    bool accepted = false;

  private:
    void copy(const TruckMessage& other);

  protected:
    bool operator==(const TruckMessage&) = delete;

  public:
    TruckMessage(const char *name=nullptr, short kind=0);
    TruckMessage(const TruckMessage& other);
    virtual ~TruckMessage();
    TruckMessage& operator=(const TruckMessage& other);
    virtual TruckMessage *dup() const override {return new TruckMessage(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual int getTruckId() const;
    virtual void setTruckId(int truckId);

    virtual int getBinId() const;
    virtual void setBinId(int binId);

    virtual bool getAccepted() const;
    virtual void setAccepted(bool accepted);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const TruckMessage& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, TruckMessage& obj) {obj.parsimUnpack(b);}


namespace omnetpp {

template<> inline TruckMessage *fromAnyPtr(any_ptr ptr) { return check_and_cast<TruckMessage*>(ptr.get<cObject>()); }

}  // namespace omnetpp

#endif // ifndef __TRUCKMESSAGE_M_H

