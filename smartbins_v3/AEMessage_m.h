//
// Generated file, do not edit! Created by opp_msgtool 6.0 from AEMessage.msg.
//

#ifndef __AEMESSAGE_M_H
#define __AEMESSAGE_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// opp_msgtool version check
#define MSGC_VERSION 0x0600
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgtool: 'make clean' should help.
#endif

class AEMessage;
/**
 * Class generated from <tt>AEMessage.msg:2</tt> by opp_msgtool.
 * <pre>
 * message AEMessage
 * {
 *     int queryID;
 *     int updateID;
 * 
 *     int URI;  // this is the unique identifer of the AE message
 * 
 *     string feature_type;  // this is the feature type of the resource looking for
 * 
 *     int data; // this is the value concerning the resource we are looking for
 * 
 *     int op_code;  // this can be
 *                 // REGISTRATION (when AE register to CSE), value = 0
 *                 // UPDATE (when AE update every x mns the CSE about the update in its values in local Database); value = 1
 *                 // CANCELLATION (when AE wants to cancel the Resource inside CSE local Database) value = 2
 *                 // QUERY (when AE wants to ask for resource), value = 3
 *                 // PUT (CSE to AE: CSE gives some directive to the corresponding AE), value = 4
 *                 // GET (CSE to AE: CSE ask some value from the corresponding AE) value = 5
 *                 // REPLY (AE to CSE: AE reply to the CSE with a value normally in data) value = 6
 *                 // RESPONSE (AE to CSE: AE reply to the CSE with a value normally in data) value = 7
 *                 // NOTIFY (between CSE to notify modifications in route tables) value = 8
 *                 // SUBSCRIBE (AE to CSE: AE subscribe to feature_type in CSE) value = 9
 * }
 * </pre>
 */
class AEMessage : public ::omnetpp::cMessage
{
  protected:
    int queryID = 0;
    int updateID = 0;
    int URI = 0;
    omnetpp::opp_string feature_type;
    int data = 0;
    int op_code = 0;

  private:
    void copy(const AEMessage& other);

  protected:
    bool operator==(const AEMessage&) = delete;

  public:
    AEMessage(const char *name=nullptr, short kind=0);
    AEMessage(const AEMessage& other);
    virtual ~AEMessage();
    AEMessage& operator=(const AEMessage& other);
    virtual AEMessage *dup() const override {return new AEMessage(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual int getQueryID() const;
    virtual void setQueryID(int queryID);

    virtual int getUpdateID() const;
    virtual void setUpdateID(int updateID);

    virtual int getURI() const;
    virtual void setURI(int URI);

    virtual const char * getFeature_type() const;
    virtual void setFeature_type(const char * feature_type);

    virtual int getData() const;
    virtual void setData(int data);

    virtual int getOp_code() const;
    virtual void setOp_code(int op_code);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const AEMessage& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, AEMessage& obj) {obj.parsimUnpack(b);}


namespace omnetpp {

template<> inline AEMessage *fromAnyPtr(any_ptr ptr) { return check_and_cast<AEMessage*>(ptr.get<cObject>()); }

}  // namespace omnetpp

#endif // ifndef __AEMESSAGE_M_H

